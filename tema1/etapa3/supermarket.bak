#lang racket
(require racket/match)
(require "queue.rkt")

(provide (all-defined-out))

(define ITEMS 5)

;; ATENȚIE: Pentru această etapă a temei este necesar să implementați
;;          întâi TDA-ul queue în fișierul queue.rkt.
;; Reveniți la sarcinile din acest fișier după ce ați implementat tipul 
;; queue și ați verificat implementarea folosind checker-ul.


; Structura counter nu se modifică.
; Ceea ce se modifică este implementarea câmpului queue:
; - în loc de listă, acesta va fi o coadă (o structură de tip queue)
; - acest lucru nu este vizibil în definiția structurii counter,
;   ci în implementarea operațiilor acestui tip de date (tipul counter)
(define-struct counter (index tt et queue) #:transparent)


; TODO
; Actualizați funcțiile de mai jos astfel încât ele să folosească
; o structură de tip queue pentru reprezentarea cozii de persoane.
; Elementele cozii continuă să fie perechi (nume . nr_produse).
; Este esențial să respectați "bariera de abstractizare", adică să
; operați cu coada doar folosind interfața acestui TDA:
; - empty-queue
; - queue-empty?
; - enqueue
; - dequeue
; - top
; Obs: Doar câteva funcții vor necesita actualizări.
(define (empty-counter index)           ; testată de checker
  (define C (make-counter index 0 0 empty-queue))
  C)

(define (update f counters index)
  (foldl (λ(x acc)(if (= (counter-index x) index)
                  (append acc (cons (f x) null))
                  (append acc (cons x null)))) null counters))

(define tt+
  (λ (minutes)
    (λ (C)
      (match C
        [(counter index tt et queue)
         (make-counter index (+ tt minutes) et queue) ]))))

(define et+
  (λ (minutes)
    (λ (C)
      (match C
        [(counter index tt et queue)
         (make-counter index tt (+ et minutes) queue) ]))))

(define (add-to-counter name items)     ; testată de checker
  (λ (C)                                ; nu modificați felul în care funcția își primește argumentele
   ; (λ (name n-items)
      (match C
        [(counter index tt et queue)
         (if (queue-empty? queue)
             (struct-copy counter C [queue (enqueue (cons name items) (counter-queue C))] [tt (+ (counter-tt C) items)] [et (+ (counter-et C) items)])
             (struct-copy counter C [queue (enqueue (cons name items) (counter-queue C))] [tt (+ (counter-tt C) items)] [et (counter-et C)]))])))


(define Cnull
  (make-counter -1 10000 10000 '()))

(define (make-pair-tt C)
  (cons (counter-index C) (counter-tt C)))

(define (make-pair-et C)
  (cons (counter-index C) (counter-et C)))

(define (general-func f counters)
  (if (null? counters)
      (f Cnull)
      (if (<= (cdr (f (car counters))) (cdr (general-func f (cdr counters))))
          (f (car counters))
          (general-func f (cdr counters)))))

(define min-tt
  (λ (counters)
    (general-func make-pair-tt counters)))

(define min-et
  (λ (counters)
    (general-func make-pair-et counters)))

(define (remove-first-from-counter C)   ; testată de checker
  (cond
    ((queue-empty? (counter-queue C)) C)
    ((= (+ (queue-size-r (counter-queue C)) (queue-size-l (counter-queue C))) 1) (struct-copy counter C [queue (dequeue (counter-queue C))] [tt 0] [et 0]))
    ((> (+ (queue-size-r (counter-queue C)) (queue-size-l (counter-queue C))) 1) (struct-copy counter C [queue (dequeue (counter-queue C))] [tt (- (counter-tt C) (counter-et C))] [et (cdr (top (dequeue (counter-queue C))))]))))
    ;;(else 'ana-are-mere)))

; TODO
; Implementați o funcție care calculează starea unei case după un număr dat de minute.
; Funcția presupune, fără să verifice, că în acest timp nu a ieșit nimeni din coadă, 
; deci va avea efect doar asupra câmpurilor tt și et.
; (cu alte cuvinte, este responsabilitatea utilizatorului să nu apeleze această funcție
; cu minutes > timpul până la ieșirea primului client din coadă)
; Atenție: casele fără clienți nu trebuie să ajungă la timpi negativi!
(define (pass-time-through-counter minutes)
  (λ (C)
    (match C
        [(counter _ tt et _)
         (if (> (counter-et C) minutes)
             (struct-copy counter C [tt (- (counter-tt C) minutes)] [et (- (counter-et C) minutes)])
             (struct-copy counter C [tt (- (counter-tt C) (counter-et C))] [et 0]))])))
  

; TODO
; Implementați funcția care simulează fluxul clienților pe la case.
; ATENȚIE: Față de etapa 2, apar modificări în:
; - formatul listei de cereri (parametrul requests)
; - formatul rezultatului funcției (explicat mai jos)
; requests conține 4 tipuri de cereri (3 moștenite din etapa 2 plus una nouă):
;   - (<name> <n-items>) - persoana <name> trebuie așezată la coadă la o casă            (ca înainte)
;   - (delay <index> <minutes>) - casa <index> este întârziată cu <minutes> minute       (ca înainte)
;   - (ensure <average>) - cât timp tt-ul mediu al tuturor caselor este mai mare decât
;                          <average>, se adaugă case fără restricții (case slow)         (ca înainte)
;   - <x> - trec <x> minute de la ultima cerere, iar starea caselor se actualizează
;           corespunzător (cu efect asupra câmpurilor tt, et, queue)                     (   NOU!   )
; Obs: Au dispărut cererile de tip remove-first, pentru a lăsa loc unui mecanism mai 
; sofisticat de a scoate clienții din coadă (pe măsură ce trece timpul).
; Sistemul trebuie să proceseze cele 4 tipuri de cereri în ordine, astfel:
; - persoanele vor fi distribuite la casele cu tt minim (dintre casele la care au voie)  (ca înainte)
; - când o casă suferă o întârziere, tt-ul și et-ul ei cresc (chiar dacă nu are clienți) (ca înainte)
; - tt-ul mediu (ttmed) se calculează pentru toate casele (și cele fast, și cele slow), 
;   iar la nevoie veți adăuga case slow una câte una, până când ttmed <= <average>       (ca înainte)
; - când timpul prin sistem avansează cu <x> minute, tt-ul, et-ul și queue-ul tuturor 
;   caselor se actualizează pentru a reflecta trecerea timpului; dacă unul sau mai mulți 
;   clienți termină de stat la coadă, ieșirile lor sunt contorizate în ordine cronologică.
; Rezultatul funcției serve va fi o pereche cu punct între:
; - lista sortată cronologic a clienților care au părăsit supermarketul
;   - fiecare element din listă va avea forma (index_casă . nume)
;   - dacă mai mulți clienți ies simultan, sortați-i crescător după indexul casei
; - lista caselor în starea finală (ca rezultatul din etapele 1 și 2)
; Obs: Pentru a contoriza ieșirile din cozi, puteți să lucrați într-o funcție ajutătoare
; (cu un parametru în plus față de funcția serve), pe care serve doar o apelează.










(define (pune-oameni C)
  (if (> (counter-et C) 0)
      C
      (if (= (+ (queue-size-r (counter-queue C)) (queue-size-l (counter-queue C))) 0)
          C
          (struct-copy counter C [et (cdr (top (counter-queue C)))] [queue (dequeue (counter-queue C))]))))

(define (cel-ce-iese C acc)
  (if (> (counter-et C) 0)
      acc
      (if (= (+ (queue-size-r (counter-queue C)) (queue-size-l (counter-queue C))) 0)
          acc
          (append acc (cons (counter-index C) (car (top (counter-queue C))))))))


(define (lista l1 l2)
  (if (list? l1)
      (append l1 l2)
      (append (cons l1 null) l2)))









(define (min-et-mai-special counters)
  (if (null? counters)
      (cons 10000 10000)
      (if (and (<= (counter-et (car counters)) (cdr (min-et-mai-special (cdr counters)))) (> (+ (queue-size-r (counter-queue (car counters))) (queue-size-l (counter-queue (car counters)))) 0))
          (cons (counter-index (car counters)) (counter-et (car counters)))
          (min-et-mai-special (cdr counters)))))


(define (average-time counters time number)
  (if (null? counters)
      (/ time number)
      (average-time (cdr counters) (+ time (counter-tt (car counters))) (+ number 1))))

(define (add-counters counters counters2 average)
  (if (>= average (average-time counters2 0 0))
      counters
      (add-counters (append counters (cons (make-counter (+ (counter-index (car (reverse counters))) 1) 0 0 empty-queue) null)) (append counters2 (cons (make-counter (+ (counter-index (car (reverse counters2))) 1) 0 0 empty-queue) null)) average)))


(define (serve-ajutator requests fast-counters slow-counters acc)
  (if (null? requests)
      (cons acc (append fast-counters slow-counters))
      ;(append fast-counters slow-counters)
      (match (car requests)
              
        [(list 'ensure average)      (if (>= average (average-time (append fast-counters slow-counters) 0 0))
                                         (serve-ajutator (cdr requests) fast-counters slow-counters acc)
                                         (serve-ajutator (cdr requests) fast-counters (add-counters slow-counters (append fast-counters slow-counters) average) acc))]
                                     ;'ana-are-2]
         
        [(list 'delay index minutes) (cond
                                       ((member index (map (λ(c)(counter-index c)) fast-counters)) (serve-ajutator (cdr requests) (update (tt+ minutes) (update (et+ minutes) fast-counters index) index) slow-counters acc))
                                       ((member index (map (λ(c)(counter-index c)) slow-counters)) (serve-ajutator (cdr requests) fast-counters (update (tt+ minutes) (update (et+ minutes) slow-counters index) index) acc)))]
                                     ;'ana-are-3]
         [(list name n-items)        (if (<= n-items ITEMS)
                                         (if (= (car (min-tt fast-counters)) (car (min-tt (append fast-counters slow-counters))))
                                             (serve-ajutator (cdr requests) (update (add-to-counter name n-items) fast-counters (car (min-tt fast-counters))) slow-counters acc)
                                             (serve-ajutator (cdr requests) fast-counters (update (add-to-counter name n-items) slow-counters (car (min-tt slow-counters))) acc))
                                        (serve-ajutator (cdr requests) fast-counters (update (add-to-counter name n-items) slow-counters (car (min-tt slow-counters))) acc))]
                                     ;'ana-are-4]
                                  
        [x (serve-ajutator (cdr requests)                ;(map (pass-time-through-counter x) fast-counters)
                                  (map pune-oameni (map (pass-time-through-counter x) fast-counters))
                                  (map pune-oameni (map (pass-time-through-counter x) slow-counters))
                                  ;(map (pass-time-through-counter x) fast-counters)
                                  ;(map (pass-time-through-counter x) slow-counters)

                                  ;fast-counters
                                  ;slow-counters

                                  ;(append acc (foldl cel-ce-iese null (cons (map (pass-time-through-counter x) fast-counters) (map (pass-time-through-counter x) slow-counters)))) )]
                                  (append acc (foldl cel-ce-iese null (lista (map (pass-time-through-counter x) fast-counters) (map (pass-time-through-counter x) slow-counters)))))]

                                  ;'ana-are-1]

        )))
        
(define (serve requests fast-counters slow-counters)
  (serve-ajutator requests fast-counters slow-counters null))


